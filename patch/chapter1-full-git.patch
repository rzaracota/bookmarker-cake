From 4e858799895060dc8959dc6d35d2ae8fd9d83916 Mon Sep 17 00:00:00 2001
From: Grey Gilroy <grey.gilroy@gmail.com>
Date: Sun, 27 Aug 2017 10:03:46 -0700
Subject: [PATCH] Apply patches to match chapter1

---
 config/routes.php                      |  9 +++++++++
 src/Controller/BookmarksController.php | 15 +++++++++++++++
 src/Model/Entity/User.php              |  7 +++++++
 src/Model/Table/BookmarksTable.php     | 17 +++++++++++++++++
 4 files changed, 48 insertions(+)

diff --git a/config/routes.php b/config/routes.php
index 43d6697..73f6f5f 100644
--- a/config/routes.php
+++ b/config/routes.php
@@ -43,6 +43,15 @@ use Cake\Routing\Route\DashedRoute;
  */
 Router::defaultRouteClass(DashedRoute::class);
 
+// new route for tagged action
+Router::scope(
+    '/bookmarks',
+    ['controller' => 'Bookmarks'],
+    function ($routes) {
+        $routes->connect('/tagged/*', ['action' => 'tags']);
+    }
+);
+
 Router::scope('/', function (RouteBuilder $routes) {
     /**
      * Here, we are connecting '/' (base path) to a controller called 'Pages',
diff --git a/src/Controller/BookmarksController.php b/src/Controller/BookmarksController.php
index 52ff1fd..0f23ae8 100644
--- a/src/Controller/BookmarksController.php
+++ b/src/Controller/BookmarksController.php
@@ -115,4 +115,19 @@ class BookmarksController extends AppController
 
         return $this->redirect(['action' => 'index']);
     }
+
+
+    public function tags() {
+        // 'pass' key provided by cake contains all passed url segments
+	$tags = $this->request->getParam('pass');
+
+        $bookmarks = $this->Bookmarks->find('tagged', [
+		   'tags' => $tags
+		 ]);
+
+	$this->set([
+		'bookmarks' => $bookmarks,
+		'tags' => $tags
+		]);
+    }
 }
diff --git a/src/Model/Entity/User.php b/src/Model/Entity/User.php
index 97b6685..b969614 100644
--- a/src/Model/Entity/User.php
+++ b/src/Model/Entity/User.php
@@ -1,6 +1,7 @@
 <?php
 namespace App\Model\Entity;
 
+use Cake\Auth\DefaultPasswordHasher;
 use Cake\ORM\Entity;
 
 /**
@@ -39,4 +40,10 @@ class User extends Entity
     protected $_hidden = [
         'password'
     ];
+
+    protected function _setPassword($value) {
+        $hasher = new DefaultPasswordHasher();
+
+	return $hasher->hash($value);
+    }
 }
diff --git a/src/Model/Table/BookmarksTable.php b/src/Model/Table/BookmarksTable.php
index 8041504..baed63a 100644
--- a/src/Model/Table/BookmarksTable.php
+++ b/src/Model/Table/BookmarksTable.php
@@ -92,4 +92,21 @@ class BookmarksTable extends Table
 
         return $rules;
     }
+
+    public function findTagged(Query $query, array $options) {
+        $bookmarks = $this->find()
+	    ->select(['id', 'url', 'title', 'description']);
+
+	if (empty($options['tags'])) {
+	    $bookmarks
+	        ->leftJoinWith('Tags')
+		->where(['Tags.title IS' => null]);
+	} else {
+	    $bookmarks
+	        ->innerJoinWith('Tags')
+		->where(['Tags.title IN ' => $options['tags']]);
+	}
+
+	return $bookmarks->group(['Bookmarks.id']);
+    }
 }
-- 
2.13.3

